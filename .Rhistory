#function to get crosstabs
get_category_dist <- function(df, column_list, sch_outcome){
for (cl in column_list) {
print(cl)
tt <- table(df[,cl], df[,sch_outcome])
print(tt)
print(gkgamma(tt))
}
}
get_category_dist(SLdataset_2018, cols, 'outcome')
#get a list of categorical columns to consider in the analysis
colnames(SLdataset_2018)
# testing for significance of numeric variables
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
# testing for significance of numeric variables
nums <- c("disability","sum_latrine","chalk_board_good","full_time_teachers","teacher_BEduc",
"teacher_PostGradEduc","learning_materials","computers","sum_enrol","counsellors",
"teachers","teacher_AnyBachelor","teacher_HTC_S","avg_teacher_service_years",
"student_teacher_ratio")
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
get_numeric_significance(SLdataset_2018, nums, 'outcome')
#import SL data
#for my pc
SLdataset_2018 <- read.csv("~/Development/dsfsi-thuto-slim/data/wassce/SLdataset_2018.csv", header=TRUE)
# creating classes
SLdataset_2018$outcome <- ifelse(SLdataset_2018$Papers_Passed < 50,
c("fail"), c("pass"))
# testing for significance of numeric variables
nums <- c("disability","sum_latrine","chalk_board_good","full_time_teachers","teacher_BEduc",
"teacher_PostGradEduc","learning_materials","computers","sum_enrol","counsellors",
"teachers","teacher_AnyBachelor","teacher_HTC_S","avg_teacher_service_years",
"student_teacher_ratio")
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
# testing for significance of numeric variables
nums <- c("sum_latrine","chalk_board_good","full_time_teachers","teacher_BEduc",
"teacher_PostGradEduc","learning_materials","computers","sum_enrol","counsellors",
"teachers","teacher_AnyBachelor","teacher_HTC_S","avg_teacher_service_years",
"student_teacher_ratio")
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
View(SLdataset_2018)
# testing for significance of numeric variables
nums <- c("sum_latrine","chalk_board_good","full_time_teachers","teacher_BEduc",
"teacher_PostGradEduc","learning_materials","computers","sum_enrol","counsellors",
"teachers","teacher_AnyBachelor","teacher_HTC_S","avg_teacher_service_years",
"student_teacher_ratio")
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
fit <- aov(cl ~ sch_outcome, data=df)
print(fit)
#print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
kruskal.test(sum_latrine ~ outcome, data = SLdataset_2018)
kruskal.test(sum_latrine ~ outcome, data = SLdataset_2018)
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
fit <- aov(cl ~ sch_outcome, data=df)
print(fit)
#print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
aov(cl ~ sch_outcome, data=df)
#print(kruskal.test(cl ~ sch_outcome, data = df))
}
get_numeric_significance <- function(df, num_list, sch_outcome){
for (cl in num_list) {
print(cl)
aov(cl ~ sch_outcome, data=df)
#print(kruskal.test(cl ~ sch_outcome, data = df))
}
}
get_numeric_significance(SLdataset_2018, nums, 'outcome')
kruskal.test(disability ~ outcome, data = SLdataset_2018)
kruskal.test(disability ~ outcome, data = SLdataset_2018)
kruskal.test(chalk_board_good ~ outcome, data = SLdataset_2018)
kruskal.test(full_time_teachers ~ outcome, data = SLdataset_2018)
kruskal.test(teacher_BEduc ~ outcome, data = SLdataset_2018)
kruskal.test(teacher_PostGradEduc ~ outcome, data = SLdataset_2018)
kruskal.test(learning_materials ~ outcome, data = SLdataset_2018)
kruskal.test(computers ~ outcome, data = SLdataset_2018)
kruskal.test(computers ~ outcome, data = SLdataset_2018)
kruskal.test(sum_enrol ~ outcome, data = SLdataset_2018)
kruskal.test(counsellors~ outcome, data = SLdataset_2018)
kruskal.test(counsellors~ outcome, data = SLdataset_2018)
kruskal.test(teachers~ outcome, data = SLdataset_2018)
kruskal.test(teacher_AnyBachelor~ outcome, data = SLdataset_2018)
kruskal.test(teacher_HTC_S~ outcome, data = SLdataset_2018)
kruskal.test(avg_teacher_service_years~ outcome, data = SLdataset_2018)
kruskal.test(student_teacher_ratio~ outcome, data = SLdataset_2018)
kruskal.test(teacher_salary_Government~ outcome, data = SLdataset_2018)
kruskal.test(teacher_salary_Government~ outcome, data = SLdataset_2018)
kruskal.test(teacher_salary_Private institution~ outcome, data = SLdataset_2018)
kruskal.test('teacher_salary_Private institution'~ outcome, data = SLdataset_2018)
# list of categorical variables
cols <- c("remoteness","school_owner","financial_support","mixed_school","boarding","dev_plan","drink_water",
"latrine_condition","drink_water_source","library","canteen","elec_grid","idregion","approval_status",
"shift_status","fence","garden","internet","avail_latrine_fac","private_cubicle","sci_lab",
"rec_facilities","generator","basic_comp_skills","feeder_school")
#function to get crosstabs
get_category_dist <- function(df, column_list, sch_outcome){
for (cl in column_list) {
print(cl)
tt <- table(df[,cl], df[,sch_outcome])
print(tt)
print(gkgamma(tt))
}
}
get_category_dist(SLdataset_2018, cols, 'outcome')
setwd("~/Development/AWIGEN-1-Post-QC/rscripts")
library(ggplot2)
library(plyr)
# reading data from my pc
awigen <- read.csv("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv", header=TRUE)
# Assign real site names
site_labels <- c("Agincourt", "Digkale", "Nairobi", "Nanoro", "Navrongo", "Soweto")
awigen$site_names <- site_labels[awigen$site]
# filtering out rows per site
agincourt <- awigen[ which(awigen$site == 1),]
digkale <- awigen[ which(awigen$site == 2),]
nairobi <- awigen[ which(awigen$site == 3),]
nanoro <- awigen[ which(awigen$site == 4),]
navrongo <- awigen[ which(awigen$site == 5),]
soweto <- awigen[ which(awigen$site == 6),]
measurememts <- c("standing_height_qc",
"weight_qc",
"waist_circumference_qc",
"hip_circumference_qc",
"bp_sys_average_qc",
"bp_dia_average_qc",
"pulse_average_qc",
"visceral_fat_qc",
"subcutaneous_fat_qc",
"min_cimt_right",
"max_cimt_right",
"mean_cimt_right",
"mean_cimt_right_qc",
"min_cimt_left",
"max_cimt_left",
"mean_cimt_left",
"mean_cimt_left_qc",
"fasting_confirmation_qc",
"glucose_qc",
"s_creatinine_qc",
"insulin_qc",
"hdl_qc",
"ldl_qc",
"cholesterol_1_qc",
"triglycerides_qc",
"ur_creatinine_qc",
"ur_albumin_qc",
"ur_protein_qc")
hiv_cols <- c("tested_hiv_qc",
"hiv_status_qc",
"hiv_positive_qc",
"hiv_medication_qc",
"traditional_med_hiv_qc",
"agree_hivtest",
"result_hiv_qc")
# create age groups
agincourt$age_group <- cut(agincourt$age,
breaks=c(40, 61, 71, max(agincourt$age)),
right = FALSE,
labels = c("40-60","61-70","71 plus"))
# categorizing soweto data
soweto_sweet <- soweto[ which(soweto$cohort_id_c == "SWEET"),]
soweto_bara <- soweto[ which(soweto$cohort_id_c == "BARA"),]
soweto_men<- soweto[ which(soweto$cohort_id_c == ""),]
# get the crosstabs for hiv
hiv_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
df_table <- table(df[, cl])
print(df_table)
}
}
# checking if the ids from the dataset below belong to soweto
copy_sweet <- read_excel("~/Downloads/Copy of Sweet HIV Testing (2).xlsx")
ids <- copy_sweet$`Study ID`
# checking if the ids from the dataset below belong to soweto
copy_sweet <- read_excel("~/Downloads/Copy of Sweet HIV Testing (2).xlsx")
# checking if the ids from the dataset below belong to soweto
library(xlsx)
copy_sweet <- read_excel("~/Downloads/Copy of Sweet HIV Testing (2).xlsx")
copy_sweet <- read_excel("~/Downloads/Copy of Sweet HIV Testing (2).xlsx")
install.packages("xlsx")
library(ggplot2)
library(plyr)
# reading data from my pc
awigen <- read.csv("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv", header=TRUE)
# Assign real site names
site_labels <- c("Agincourt", "Digkale", "Nairobi", "Nanoro", "Navrongo", "Soweto")
awigen$site_names <- site_labels[awigen$site]
# filtering out rows per site
agincourt <- awigen[ which(awigen$site == 1),]
digkale <- awigen[ which(awigen$site == 2),]
nairobi <- awigen[ which(awigen$site == 3),]
nanoro <- awigen[ which(awigen$site == 4),]
navrongo <- awigen[ which(awigen$site == 5),]
soweto <- awigen[ which(awigen$site == 6),]
measurememts <- c("standing_height_qc",
"weight_qc",
"waist_circumference_qc",
"hip_circumference_qc",
"bp_sys_average_qc",
"bp_dia_average_qc",
"pulse_average_qc",
"visceral_fat_qc",
"subcutaneous_fat_qc",
"min_cimt_right",
"max_cimt_right",
"mean_cimt_right",
"mean_cimt_right_qc",
"min_cimt_left",
"max_cimt_left",
"mean_cimt_left",
"mean_cimt_left_qc",
"fasting_confirmation_qc",
"glucose_qc",
"s_creatinine_qc",
"insulin_qc",
"hdl_qc",
"ldl_qc",
"cholesterol_1_qc",
"triglycerides_qc",
"ur_creatinine_qc",
"ur_albumin_qc",
"ur_protein_qc")
hiv_cols <- c("tested_hiv_qc",
"hiv_status_qc",
"hiv_positive_qc",
"hiv_medication_qc",
"traditional_med_hiv_qc",
"agree_hivtest",
"result_hiv_qc")
# create age groups
agincourt$age_group <- cut(agincourt$age,
breaks=c(40, 61, 71, max(agincourt$age)),
right = FALSE,
labels = c("40-60","61-70","71 plus"))
# categorizing soweto data
soweto_sweet <- soweto[ which(soweto$cohort_id_c == "SWEET"),]
soweto_bara <- soweto[ which(soweto$cohort_id_c == "BARA"),]
soweto_men<- soweto[ which(soweto$cohort_id_c == ""),]
# get the crosstabs for hiv
hiv_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
df_table <- table(df[, cl])
print(df_table)
}
}
hiv_cat_freq(soweto_bara, hiv_cols)
hiv_cat_freq(soweto_sweet, hiv_cols)
num_var_summary <- function(df, num_col, site_names){
# checking -999 values: missing values
with_999 <- df[ which(df[, num_col] == -999), ]
print("Printing the number of missing values per site")
print(data.frame(table(with_999[, site_names])))
print(" ")
# removing -999 values
no_999 <- df[ which(df[, num_col] != -999), ]
print("Printing the count of non missing values per site")
print(data.frame(table(no_999[, site_names])))
print(summary(no_999[, site_names]))
# getting the mean per site
mu_mean <- do.call("ddply",list(no_999, site_names, summarize, aw_std.mean = call("mean",as.symbol(num_col),na.rm=TRUE)))
print("printing the means")
print(head(mu_mean))
# getting the medians per site
mu_median <- do.call("ddply",list(no_999, site_names, summarize, aw_std.median = call("median",as.symbol(num_col),na.rm=TRUE)))
print("printing the medians per site")
print(head(mu_median))
# getting the outliers
outliers <- boxplot(no_999[, num_col], plot=FALSE)$out
no_999_outliers <- no_999[which(no_999[, num_col] %in% outliers),]
print("printing the outliers")
print(data.frame(table(no_999_outliers[, site_names])))
# plotting using ggplot
theme_prefered = theme(
plot.title = element_text(color="black", size=18),
axis.title.x = element_text(color="black", size=18),
axis.title.y = element_text(color="black", size=18),
axis.text = element_text(color="black", size=16),
legend.text = element_text(color="black", size=18),
legend.title = element_text(color="black", size=18),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
plt <- ggplot(no_999, aes(x=no_999[,num_col], color=site_names, fill=site_names)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5, bins = 30)+
geom_density(alpha=0.6)+
geom_vline(data=mu_mean, aes(xintercept=aw_std.mean, color=site_names),
linetype="dashed")+
geom_vline(data=mu_median, aes(xintercept=aw_std.median, color=site_names),
linetype="solid")+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9", "#de97da", "#e3948d", "#ecedb7"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", "#de97da", "#e3948d", "#ecedb7"))+
labs(title= paste(num_col, "histogram", sep=" "), x=num_col, y = "Density")+
theme_prefered
print(plt)
}
num_var_summary(awigen, "weight_qc", "site_names")
num_var_summary(awigen, "weight_qc", "sex")
num_var_summary(soweto, "weight_qc", "site_names")
library(ggplot2)
library(plyr)
library(xlsx)
# reading data from my pc
awigen <- read_excel("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv", header=TRUE)
# reading data from my pc
awigen <- read.excel("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv", header=TRUE)
library(readxl)
# reading data from my pc
awigen <- read.excel("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv", header=TRUE)
library(ggplot2)
library(plyr)
library(readxl)
# reading data from my pc
awigen <- read.excel("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv", header=TRUE)
# reading data from my pc
awigen <- read_excel("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv", header=TRUE)
# reading data from my pc
awigen <- read_excel("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.csv")
# reading data from my pc
awigen <- read_excel("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.23.xlsx")
View(awigen)
# Assign real site names
site_labels <- c("Agincourt", "Digkale", "Nairobi", "Nanoro", "Navrongo", "Soweto")
awigen$site_names <- site_labels[awigen$site]
# filtering out rows per site
agincourt <- awigen[ which(awigen$site == 1),]
digkale <- awigen[ which(awigen$site == 2),]
nairobi <- awigen[ which(awigen$site == 3),]
nanoro <- awigen[ which(awigen$site == 4),]
navrongo <- awigen[ which(awigen$site == 5),]
soweto <- awigen[ which(awigen$site == 6),]
measurememts <- c("standing_height_qc",
"weight_qc",
"waist_circumference_qc",
"hip_circumference_qc",
"bp_sys_average_qc",
"bp_dia_average_qc",
"pulse_average_qc",
"visceral_fat_qc",
"subcutaneous_fat_qc",
"min_cimt_right",
"max_cimt_right",
"mean_cimt_right",
"mean_cimt_right_qc",
"min_cimt_left",
"max_cimt_left",
"mean_cimt_left",
"mean_cimt_left_qc",
"fasting_confirmation_qc",
"glucose_qc",
"s_creatinine_qc",
"insulin_qc",
"hdl_qc",
"ldl_qc",
"cholesterol_1_qc",
"triglycerides_qc",
"ur_creatinine_qc",
"ur_albumin_qc",
"ur_protein_qc")
hiv_cols <- c("tested_hiv_qc",
"hiv_status_qc",
"hiv_positive_qc",
"hiv_medication_qc",
"traditional_med_hiv_qc",
"agree_hivtest",
"result_hiv_qc")
# create age groups
agincourt$age_group <- cut(agincourt$age,
breaks=c(40, 61, 71, max(agincourt$age)),
right = FALSE,
labels = c("40-60","61-70","71 plus"))
# categorizing soweto data
soweto_sweet <- soweto[ which(soweto$cohort_id_c == "SWEET"),]
soweto_bara <- soweto[ which(soweto$cohort_id_c == "BARA"),]
soweto_men<- soweto[ which(soweto$cohort_id_c == ""),]
# get the crosstabs for hiv
hiv_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
df_table <- table(df[, cl])
print(df_table)
}
}
hiv_cat_freq(soweto_bara, hiv_cols)
# get the crosstabs for hiv
hiv_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
df_table <- table(df[, cl])
print(df_table)
}
}
hiv_cat_freq(soweto_sweet, hiv_cols)
# reading data from my pc
awigen <- read_excel("~/Development/AWIGEN-1-Post-QC/data/raw/all_sites_v2.5.3.24.xlsx")
# Assign real site names
site_labels <- c("Agincourt", "Digkale", "Nairobi", "Nanoro", "Navrongo", "Soweto")
awigen$site_names <- site_labels[awigen$site]
# filtering out rows per site
agincourt <- awigen[ which(awigen$site == 1),]
digkale <- awigen[ which(awigen$site == 2),]
nairobi <- awigen[ which(awigen$site == 3),]
nanoro <- awigen[ which(awigen$site == 4),]
navrongo <- awigen[ which(awigen$site == 5),]
soweto <- awigen[ which(awigen$site == 6),]
measurememts <- c("standing_height_qc",
"weight_qc",
"waist_circumference_qc",
"hip_circumference_qc",
"bp_sys_average_qc",
"bp_dia_average_qc",
"pulse_average_qc",
"visceral_fat_qc",
"subcutaneous_fat_qc",
"min_cimt_right",
"max_cimt_right",
"mean_cimt_right",
"mean_cimt_right_qc",
"min_cimt_left",
"max_cimt_left",
"mean_cimt_left",
"mean_cimt_left_qc",
"fasting_confirmation_qc",
"glucose_qc",
"s_creatinine_qc",
"insulin_qc",
"hdl_qc",
"ldl_qc",
"cholesterol_1_qc",
"triglycerides_qc",
"ur_creatinine_qc",
"ur_albumin_qc",
"ur_protein_qc")
hiv_cols <- c("tested_hiv_qc",
"hiv_status_qc",
"hiv_positive_qc",
"hiv_medication_qc",
"traditional_med_hiv_qc",
"agree_hivtest",
"result_hiv_qc")
# create age groups
agincourt$age_group <- cut(agincourt$age,
breaks=c(40, 61, 71, max(agincourt$age)),
right = FALSE,
labels = c("40-60","61-70","71 plus"))
# categorizing soweto data
soweto_sweet <- soweto[ which(soweto$cohort_id_c == "SWEET"),]
soweto_bara <- soweto[ which(soweto$cohort_id_c == "BARA"),]
soweto_men<- soweto[ which(soweto$cohort_id_c == ""),]
# get the crosstabs for hiv
hiv_cat_freq <- function(df, column_list){
for (cl in column_list) {
print(cl)
df_table <- table(df[, cl])
print(df_table)
}
}
hiv_cat_freq(soweto_sweet, hiv_cols)
hiv_cat_freq(soweto_bara, hiv_cols)
hiv_cat_freq(soweto_bara, hiv_cols)
# comparing two categorical columns
table(soweto_bara$agree_hivtest_qc, soweto_bara$result_hiv_qc)
summary(agincourt$standing_height_qc)
a_with_999 <- agincourt[ which(agincourt$standing_height_qc == -999), ]
summary(a_with_999$standing_height_qc)
a_with_999 <- agincourt[ -which(agincourt$standing_height_qc == -999), ]
summary(a_with_999$standing_height_qc)
a_with_999 <- agincourt[ -which(agincourt$standing_height_qc == -999), ]
summary(a_with_999$standing_height_qc)
outliers <- boxplot(a_with_999$standing_height_qc, plot=FALSE)$out
no_999_outliers <- a_with_999[which(a_with_999$standing_height_qc %in% outliers),]
View(no_999_outliers)
View(no_999_outliers$standing_height_qc)
setwd("~/Development/AWIGEN-1-Post-QC/rscripts")
setwd("~/Development/AWIGEN-2-QC---PYTHON")
data <- read.csv("~/Development/AWIGEN-2-QC---PYTHON/resources/data.csv", header=FALSE)
View(data)
data <- read.csv("~/Development/AWIGEN-2-QC---PYTHON/resources/data.csv", header=TRUE)
View(data)
View(data)
